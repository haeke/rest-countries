{"version":3,"sources":["components/CountryInput/CountryInput.js","components/CountryImage/CountryImage.js","components/CountrySelect/CountrySelect.js","components/CountryFlagInfo/CountryFlagInfo.js","api/api.js","components/Countries/Countries.js","components/CountryDisplay/CountryDisplay.js","components/Header/Header.js","hooks/useToggle.js","components/App/App.js","index.js"],"names":["CountryInput","_ref","className","name","value","placeholder","handleChange","react_default","a","createElement","onChange","CountryImage","src","alt","CountrySelect","defaultSelect","handleSelect","options","on","id","defaultValue","disabled","map","optionName","key","CountryFlagInfo","countryTitle","countryTitleClass","countryPopulation","countryTextClass","countryRegion","countryCapital","fetchReducer","state","action","type","data","isLoading","errorMessage","error","Countries","_useState","useState","_useState2","Object","slicedToArray","updateName","_useFetch","URL","url","setUrl","_useReducer","useReducer","_useReducer2","dispatch","useEffect","didCancel","asyncToGenerator","regenerator_default","mark","_callee","response","json","wrap","_context","prev","next","fetch","concat","sent","status","Error","t0","message","stop","apply","this","arguments","fetchData","objectSpread","doFetch","useFetch","console","log","onSubmit","event","preventDefault","components_CountryInput_CountryInput","target","components_CountrySelect_CountrySelect","keys","length","country","react_router_dom","to","pathname","components_CountryImage_CountryImage","flag","components_CountryFlagInfo_CountryFlagInfo","population","region","capital","CountryDisplay","props","esm_extends","location","nativeName","subregion","topLevelDomain","currencies","languages","language","borders","Header","toggle","onClick","htmlFor","useToggle","initialOn","undefined","setOn","App","_useToggle","components_Header_Header","react_router","path","exact","component","Countries_Countries","assign","components_CountryDisplay_CountryDisplay","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.27dde4dd.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// This is a controlled input component, the name and value need to be passed along with the handleChange function.\n\nconst CountryInput = ({\n  className,\n  name,\n  value,\n  placeholder,\n  handleChange\n}) => {\n  return (\n    <input\n      className={className}\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nCountryInput.propTypes = {\n  className: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  handleChange: PropTypes.func\n};\n\nexport default CountryInput;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CountryImage = ({ src, alt, className }) => {\n  return <img src={src} alt={alt} className={className} />;\n};\n\nCountryImage.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n  className: PropTypes.string\n};\n\nexport default CountryImage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// The defaultSelect prop is the name of the select before a user clicks on the drop down. The options array is the list of options that you want a user to choose from. The handleSelect method will make a request from the restcountries API.\n\nimport \"./CountrySelect.css\";\n\nconst CountrySelect = ({ defaultSelect, handleSelect, options, on }) => {\n  return (\n    <select\n      className={on ? \"countrySelectAlt\" : \"countrySelect\"}\n      name=\"regions\"\n      id=\"region\"\n      onChange={handleSelect}\n      defaultValue={defaultSelect}\n    >\n      <option value={defaultSelect} disabled>\n        {defaultSelect}\n      </option>\n      {options.map(optionName => (\n        <option key={optionName} value={optionName}>\n          {optionName}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nCountrySelect.propTypes = {\n  defaultSelect: PropTypes.string,\n  options: PropTypes.array,\n  on: PropTypes.bool\n};\n\nexport default CountrySelect;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// The className is passed to change the styling of the component div, the countryTitle and countryTitleClass control the text and style of the text it should be larger than the other text. The countryPopulation, countryRegion, countryCapital should all use the same class style.\n\nconst CountryFlagInfo = ({\n  className,\n  countryTitle,\n  countryTitleClass,\n  countryPopulation,\n  countryTextClass,\n  countryRegion,\n  countryCapital\n}) => {\n  return (\n    <div className={className}>\n      <h1 className={countryTitleClass}>{countryTitle}</h1>\n      <h1 className={countryTextClass}>Population: {countryPopulation}</h1>\n      <h1 className={countryTextClass}>Region: {countryRegion}</h1>\n      <h1 className={countryTextClass}>Capital: {countryCapital}</h1>\n    </div>\n  );\n};\n\nCountryFlagInfo.propTypes = {\n  className: PropTypes.string,\n  countryTitle: PropTypes.string,\n  countryTitleClass: PropTypes.string,\n  countryPopulation: PropTypes.number,\n  countryTextClass: PropTypes.string,\n  countyRegion: PropTypes.string,\n  countryCapital: PropTypes.string\n};\n\nexport default CountryFlagInfo;\n","// Mock URL Endpoint https://restcountries.eu/rest/v2/name/united\n// The query string after the name is the only item that will change.\n\nimport { useReducer, useState, useEffect } from \"react\";\n\n// This function is used by the useFetch custom hook, it determines the shape of the data that is to be returned upon successful request or a failed request. The benefit to this approach is that we are managing 3 values inside the state tree at once using the useReducer hook over using 3 different useState functions for managing the data object, isLoading boolean and errorMessage string.\nexport const fetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FAILURE\":\n      return {\n        data: null,\n        isLoading: false,\n        errorMessage: action.error\n      };\n    case \"SUCCESS\":\n      return {\n        data: action.data,\n        isLoading: false,\n        errorMessage: \"\"\n      };\n    default:\n      return state;\n  }\n};\n\nexport function useFetch(URL) {\n  // The initial State that we want the reducer to return.\n  const initialState = { data: null, isLoading: true, errorMessage: \"\" };\n  // The url that the Countries component will pass to this useReducer hook, it will change whenever a user types into the input form.\n  const [url, setUrl] = useState(URL);\n  // The reducer itself, we will return an object that includes the data, isLoading, errorMessage and function for updating the URL called doFetch.\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  useEffect(() => {\n    // support the ability to cancel async calls\n    let didCancel = false;\n    // Note: To use async inside of useEffect we needed to define the fetchData expression, we manage how many times the function is called by only calling the function when the url state changes.\n    const fetchData = async () => {\n      try {\n        // pass the full url to the fetch method\n        const response = await fetch(`${url}`);\n        let json = await response.json();\n        if (json.status === 404) {\n          throw new Error(json);\n        }\n        if (!didCancel) {\n          // call dispatch to update the reducer state object\n          dispatch({ type: \"SUCCESS\", data: json });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: \"FAILURE\", error: error.message || error });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch };\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport CountryInput from \"../CountryInput/CountryInput\";\nimport CountryImage from \"../CountryImage/CountryImage\";\nimport CountrySelect from \"../CountrySelect/CountrySelect\";\nimport CountryFlagInfo from \"../CountryFlagInfo/CountryFlagInfo\";\n\nimport { useFetch } from \"../../api/api\";\n\nfunction Countries({ on }) {\n  let [name, updateName] = useState(\"am\");\n  // The useFetch hook returns objects and a method to change the url that we will use to fetch different data. America is loaded initially so that there will be data on the page.\n  let { data, isLoading, errorMessage, doFetch } = useFetch(\n    `https://restcountries.eu/rest/v2/name/${name}`\n  );\n  // This function is called when a user types into the input.\n  const handleChange = event => {\n    const { value } = event.target;\n    updateName(value);\n    if (value !== \"\") {\n      doFetch(`https://restcountries.eu/rest/v2/name/${value}`);\n    }\n  };\n  // This function is called when the filter drop select is used.\n  const handleSelect = event => {\n    const { value } = event.target;\n    // calls the doFetch function with a different url\n    if (value !== \"\") {\n      doFetch(`https://restcountries.eu/rest/v2/region/${value}`);\n    }\n  };\n  // For testing purposes - we can see the values inside of the custom reducer hook.\n  console.log(\"The data object \", data);\n  console.log(\"The isLoading Boolean \", isLoading);\n  console.log(\"The errorMessage \", errorMessage);\n  return (\n    <section className=\"countriesContainer\">\n      <div className=\"inputSection\">\n        {/* A user can click on the submit button to fetch for data */}\n        <form\n          className=\"formWrapper\"\n          onSubmit={event => {\n            event.preventDefault();\n            doFetch(`https://restcountries.eu/rest/v2/name/${name}`);\n          }}\n        >\n          <div className=\"inputIconGroup\">\n            <CountryInput\n              className=\"countryInput\"\n              name=\"name\"\n              value={name}\n              placeholder=\"Search for a country...\"\n              handleChange={handleChange}\n            />\n            <button className=\"searchIcon\">\n              <i className=\"fa fa-search \" />\n            </button>\n          </div>\n          <CountrySelect\n            defaultSelect=\"Filter by Region\"\n            handleSelect={handleSelect}\n            options={[\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"]}\n            on={on}\n          />\n        </form>\n      </div>\n      {/* Refactor to component named:  */}\n      {/* include the flag image, flag name, population, region and capital */}\n      {/* image name : data.flag */}\n      {/* population: data.population */}\n      {/* region: data.region */}\n      {/* capital: data.capital */}\n      <div className=\"countryListWrapper\">\n        {isLoading ? (\n          <h1>Loading Data...</h1>\n        ) : errorMessage ? (\n          <div>Error fetching data...</div>\n        ) : (\n          Object.keys(data).length > 0 &&\n          data.map(country => (\n            <Link\n              to={{\n                pathname: `/country/${country.name}`,\n                state: { country: country }\n              }}\n              className={on ? \"fourth countryInfoAlt\" : \"fourth countryInfo\"}\n              key={country.name}\n            >\n              <CountryImage\n                src={country.flag}\n                alt={country.name}\n                className=\"flagImage\"\n              />\n              <CountryFlagInfo\n                className=\"countryTextContainer\"\n                countryTitle={country.name}\n                countryTitleClass=\"\"\n                countryPopulation={country.population}\n                countryTextClass=\"countryText\"\n                countryRegion={country.region}\n                countryCapital={country.capital}\n              />\n            </Link>\n          ))\n        )}\n      </div>\n    </section>\n  );\n}\n\nexport default Countries;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./CountryDisplay.css\";\n\nimport CountryImage from \"../CountryImage/CountryImage\";\n\n// Info to be displayed\n// Country Name - country.name\n// Native Name - country.nativeName\n// Population - country.population\n// Region - country.region\n// Sub Region - country.subregion\n// Capital - country.capital\n// Top Level Domain - country.topLevelDomain\n// Currencies - country.currencies ( an array )\n// Languages - country.languages (an array)\n// Border Countries - country.borders ( an array )\n\nconst CountryDisplay = ({ ...props }) => {\n  const { country } = props.location.state;\n  const { on } = props;\n  return (\n    <section className=\"countryInfoContainer\">\n      <button className={on ? \"backButtonAlt\" : \"backButton\"}>\n        <Link className=\"whiteText link\" to=\"/\">\n          <i className=\"fas fa-arrow-left\" />\n          <span className=\"backLink\">Back</span>\n        </Link>\n      </button>\n      <div className={on ? \"countryInfoAlt\" : \"countryInfo\"}>\n        <div className=\"countryInfoLeft\">\n          <CountryImage\n            src={country.flag}\n            alt={country.name}\n            className=\"countryDisplayImage\"\n          />\n        </div>\n        <div className=\"countryInfoRight\">\n          <h1 className=\"countryName\">{country.name}</h1>\n          <div className=\"countryInfoWrapper\">\n            <div className=\"countryInfoWrapperLeft\">\n              <h2 className=\"countryDisplayText\">\n                Native Name:{\" \"}\n                <span className=\"countryDetailSpan\">{country.nativeName}</span>\n              </h2>\n              <h2 className=\"countryDisplayText\">\n                Population:{\" \"}\n                <span className=\"countryDetailSpan\">{country.population}</span>\n              </h2>\n              <h2 className=\"countryDisplayText\">\n                Region:{\" \"}\n                <span className=\"countryDetailSpan\">{country.region}</span>\n              </h2>\n              <h2 className=\"countryDisplayText\">\n                Sub Region:{\" \"}\n                <span className=\"countryDetailSpan\">{country.subregion}</span>\n              </h2>\n              <h2 className=\"countryDisplayText\">\n                Capital:{\" \"}\n                <span className=\"countryDetailSpan\">{country.capital}</span>\n              </h2>\n            </div>\n            <div className=\"countryInfoWrapperRight\">\n              <h2 className=\"countryDisplayText\">\n                Top Level Domain:{\" \"}\n                <span className=\"countryDetailSpan\">\n                  {country.topLevelDomain}\n                </span>\n              </h2>\n              <h2 className=\"countryDisplayText\">\n                Currencies:{\" \"}\n                {country.currencies.map(name => (\n                  <span className=\"countryDetailSpan\" key={name.name}>\n                    {name.name}\n                  </span>\n                ))}\n              </h2>\n              <h2 className=\"countryDisplayText\">\n                Languages:{\" \"}\n                <span className=\"countryDetailSpan\">\n                  {country.languages.map(language => language.name)}\n                </span>\n              </h2>\n              <h2 className=\"countryDisplayText\">Border Countries:</h2>\n              {country.borders.map(name => (\n                <span\n                  className=\"countryDetailSpan\"\n                  key={name}\n                >{` ${name}\\t`}</span>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CountryDisplay;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\n// The toggle and on props are used to control the active class that sets the background and font color for the theme.\n\nconst Header = ({ toggle, on }) => {\n  return (\n    <header className={on ? \"headerContainerAlt\" : \"headerContainer\"}>\n      <Link className=\"headerTitle\" to=\"/rest-countries\">\n        <h1 className=\"headerTitle\">Where in the world?</h1>\n      </Link>\n      <input\n        type=\"checkbox\"\n        id=\"toggle\"\n        className=\"offscreen\"\n        onClick={() => toggle()}\n      />{\" \"}\n      <label htmlFor=\"toggle\" className=\"switch\" />\n    </header>\n  );\n};\n\nexport default Header;\n","import { useState } from \"react\";\n\n// share a boolean and method for toggling the state of the boolean, the boolean value is set to false initially.\n\nfunction useToggle(initialOn = false) {\n  const [on, setOn] = useState(initialOn);\n  const toggle = () => setOn(!on);\n  return {\n    on,\n    toggle\n  };\n}\n\nexport default useToggle;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Countries from \"../Countries/Countries\";\nimport CountryDisplay from \"../CountryDisplay/CountryDisplay\";\nimport Header from \"../Header/Header\";\nimport useToggle from \"../../hooks/useToggle\";\n// The Routes for Countries and CountryDisplay are render props because we need to pass the on boolean value to determine the background color and font colors when switching from light and dark themes.\n\nconst App = () => {\n  const { on, toggle } = useToggle();\n  return (\n    <main className={on ? \"newBody\" : \"mainConatiner\"}>\n      <Router>\n        <Header toggle={toggle} on={on} />\n        <Switch>\n          <Route\n            path=\"/rest-countries\"\n            exact\n            component={props => <Countries on={on} {...props} />}\n          />\n          <Route\n            path=\"/country/:name\"\n            exact\n            component={props => <CountryDisplay on={on} {...props} />}\n          />\n        </Switch>\n      </Router>\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}